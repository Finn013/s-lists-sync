import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { DataManager } from '../utils/dataManager';
import { CryptoManager } from '../utils/cryptoManager';
import { useToast } from '@/hooks/use-toast';

const PasswordChangeDialog: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [currentPassword, setCurrentPassword] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const { toast } = useToast();

  const dataManager = new DataManager();
  const cryptoManager = new CryptoManager();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
    setIsLoading(true);

    if (newPassword !== confirmPassword) {
      setError('–ù–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
      setIsLoading(false);
      return;
    }

    if (newPassword.length < 4) {
      setError('–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞');
      setIsLoading(false);
      return;
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
      const isCurrentValid = await dataManager.verifyPassword(currentPassword);
      if (!isCurrentValid) {
        setError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å');
        setIsLoading(false);
        return;
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
      await cryptoManager.setPassword(newPassword);
      await dataManager.setPassword(newPassword);

      toast({
        title: "–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω",
        description: "–í–∞—à –ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω",
      });

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏ –æ—á–∏—â–∞–µ–º –ø–æ–ª—è
      setIsOpen(false);
      setCurrentPassword('');
      setNewPassword('');
      setConfirmPassword('');
    } catch (error) {
      console.error('Error changing password:', error);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button
          size="sm"
          variant="outline"
          className="bg-yellow-50 border-yellow-200 hover:bg-yellow-100 text-xs px-2 sm:px-3"
        >
          üîë <span className="hidden sm:inline ml-1">–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å</span>
        </Button>
      </DialogTrigger>
      <DialogContent className="max-w-xs xs:max-w-sm w-full p-4">
        <DialogHeader>
          <DialogTitle>–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <Input
              type="password"
              placeholder="–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å"
              value={currentPassword}
              onChange={(e) => setCurrentPassword(e.target.value)}
              required
              disabled={isLoading}
              className="text-base"
            />
          </div>
          
          <div>
            <Input
              type="password"
              placeholder="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
              value={newPassword}
              onChange={(e) => setNewPassword(e.target.value)}
              required
              disabled={isLoading}
              className="text-base"
            />
          </div>
          
          <div>
            <Input
              type="password"
              placeholder="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              required
              disabled={isLoading}
              className="text-base"
            />
          </div>

          {error && (
            <div className="text-red-600 text-sm">
              {error}
            </div>
          )}

          <div className="flex gap-2 pt-2">
            <Button
              type="button"
              variant="outline"
              onClick={() => setIsOpen(false)}
              disabled={isLoading}
              className="flex-1"
            >
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button
              type="submit"
              disabled={isLoading}
              className="flex-1"
            >
              {isLoading ? '–ò–∑–º–µ–Ω–µ–Ω–∏–µ...' : '–ò–∑–º–µ–Ω–∏—Ç—å'}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default PasswordChangeDialog;
